//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/OurStuff/InputActions/MouseActionMapping.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MouseActionMapping : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MouseActionMapping()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MouseActionMapping"",
    ""maps"": [
        {
            ""name"": ""MainMouseActionMapping"",
            ""id"": ""d008456a-5509-4c64-8ddf-e39b1595f87b"",
            ""actions"": [
                {
                    ""name"": ""LeftMouseClick"",
                    ""type"": ""Button"",
                    ""id"": ""1e563a47-f067-4305-812f-b6c4b3a11d72"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a89b70d1-d8e8-492b-bce7-82ccbac1c126"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""48f913b7-aec6-4e0a-944c-5ca5d597e5d3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftMouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa77c8f0-3534-43e6-b6d4-308127dcb3e4"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MainMouseActionMapping
        m_MainMouseActionMapping = asset.FindActionMap("MainMouseActionMapping", throwIfNotFound: true);
        m_MainMouseActionMapping_LeftMouseClick = m_MainMouseActionMapping.FindAction("LeftMouseClick", throwIfNotFound: true);
        m_MainMouseActionMapping_Position = m_MainMouseActionMapping.FindAction("Position", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainMouseActionMapping
    private readonly InputActionMap m_MainMouseActionMapping;
    private IMainMouseActionMappingActions m_MainMouseActionMappingActionsCallbackInterface;
    private readonly InputAction m_MainMouseActionMapping_LeftMouseClick;
    private readonly InputAction m_MainMouseActionMapping_Position;
    public struct MainMouseActionMappingActions
    {
        private @MouseActionMapping m_Wrapper;
        public MainMouseActionMappingActions(@MouseActionMapping wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftMouseClick => m_Wrapper.m_MainMouseActionMapping_LeftMouseClick;
        public InputAction @Position => m_Wrapper.m_MainMouseActionMapping_Position;
        public InputActionMap Get() { return m_Wrapper.m_MainMouseActionMapping; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainMouseActionMappingActions set) { return set.Get(); }
        public void SetCallbacks(IMainMouseActionMappingActions instance)
        {
            if (m_Wrapper.m_MainMouseActionMappingActionsCallbackInterface != null)
            {
                @LeftMouseClick.started -= m_Wrapper.m_MainMouseActionMappingActionsCallbackInterface.OnLeftMouseClick;
                @LeftMouseClick.performed -= m_Wrapper.m_MainMouseActionMappingActionsCallbackInterface.OnLeftMouseClick;
                @LeftMouseClick.canceled -= m_Wrapper.m_MainMouseActionMappingActionsCallbackInterface.OnLeftMouseClick;
                @Position.started -= m_Wrapper.m_MainMouseActionMappingActionsCallbackInterface.OnPosition;
                @Position.performed -= m_Wrapper.m_MainMouseActionMappingActionsCallbackInterface.OnPosition;
                @Position.canceled -= m_Wrapper.m_MainMouseActionMappingActionsCallbackInterface.OnPosition;
            }
            m_Wrapper.m_MainMouseActionMappingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftMouseClick.started += instance.OnLeftMouseClick;
                @LeftMouseClick.performed += instance.OnLeftMouseClick;
                @LeftMouseClick.canceled += instance.OnLeftMouseClick;
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
            }
        }
    }
    public MainMouseActionMappingActions @MainMouseActionMapping => new MainMouseActionMappingActions(this);
    public interface IMainMouseActionMappingActions
    {
        void OnLeftMouseClick(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
    }
}
